<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>saity dev</title>
    <link>https://www.saity.dev/</link>
    <description>Recent content on saity dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 05 Mar 2024 14:09:26 +0900</lastBuildDate><atom:link href="https://www.saity.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>線形代数の学び直し[線形代数のエッセンス]</title>
      <link>https://www.saity.dev/posts/vector_study/</link>
      <pubDate>Tue, 05 Mar 2024 14:09:26 +0900</pubDate>
      
      <guid>https://www.saity.dev/posts/vector_study/</guid>
      
      <description>3Blue1Brownが出している線形代数のエッセンス(https://youtube.com/playlist?list=PL5WufEA7WHQGX7Su06JzbPDXUQGOd0wlq&amp;amp;si=x98fuVYKHjpSN0PE)が見ていて学び直しにとても役に立ったと感じました。学び直しだけでなく、これから線形代数を学ぶという方にもおすすめできる内容だと思いました。自分はこれを見て、今まで適当に線形代数をやっていたんだと思い知らされました。 具体的には&amp;hellip;
Spanや基底ベクトルについての理解。特にspanが何を表しているのかをしっかり理解できました。 正方行列、非正方行列の意味やそれによる変換がやっていることについて。平面上にある格子線が変形されていくアニメーションがとてもわかりやすい。 行列式がなにを表しているか。 内積や外積の意味について。特に内積がなぜ各要素の積の総和を取るのかがよくわかりました。 クラメルの公式の導出をちゃんと理解できました。今まで丸暗記していました。。 固有値や固有ベクトルが何を表しているかについて。定義からみてもなんとなくわかりますが、アニメーションによる説明で理解が深まりました。 今まで適当にながしていた用語や数式の意味をある程度知ることが出来ました。(span,行列式,rank,trace,kernelなど) これ以外にも、重要な知識や考え方が説明されていたので、定期的に復習し直すのが良いと思いました。</description>
      
    </item>
    
    <item>
      <title>Windows11の再インストール手順をマニュアル化</title>
      <link>https://www.saity.dev/posts/windows_init/</link>
      <pubDate>Wed, 27 Dec 2023 08:55:11 +0900</pubDate>
      
      <guid>https://www.saity.dev/posts/windows_init/</guid>
      
      <description>はじめに これまでWindowsの再インストールは何度かやってきましたが、バックアップの確認、再インストール手順の確認、インストールされていたソフトや設定ファイルの内容を思い出すなど、やることが多くて毎回苦労していました。
そこで、今回はWindowsの再インストールの手順や注意事項、インストール自動化（完全に自動ではない）スクリプトをまとめたリポジトリを作成して、Windows再インストール手順のマニュアルを作成しました。Windowsの再インストールが面倒くさいと感じている方や、Windowsをこれから使うというような方に、なにか役立つ情報を共有できればいいなと思っています。
(注意: Windowsのインストール完了までの詳しい手順はここではあまり詳しくは書かないので、公式のドキュメントや別のサイトを参考にするようにしてください。)
バックアップをとっておく 必要なものをバックアップとして別のドライブ、またはUSBメモリにコピーしておきましょう。ちなみに自分は必要なデータはほぼOneDriveや別ドライブに保存しているため、バックアップはsshの秘密鍵が格納されている.sshフォルダのみで十分でした。あとvscodeの設定ファイルとかもありますね。面倒であれば、Usersフォルダごとバックアップを取るでもいいかもしれないです。
インストールメディアを作成する 16Gb以上のUSBを使ってWindowsのインストールメディアを作成します。
下記リンクにある上から３つ目の項目からISOファイルをダウンロードします。
https://www.microsoft.com/en-us/software-download/Windows11
続いて、rufusと呼ばれるisoファイルからインストールメディアを作成するツールをダウンロードします。
https://forest.watch.impress.co.jp/library/software/rufus/
このrufusを起動して、先程ダウンロードしたisoファイルと使うUSBメモリを指定してインストールメディアを作成します。
Windowsをインストールする Bios画面を開き、指定のUSBが起動するように設定します。もう一度再起動すると、Windowsのインストール画面が表示されるので、決まった手順でインストールまで進めます。
wingetでgitをインストール シェルスクリプトでwingetを回したいので、git bashをとりあえず手動でインストールします。
winget install -e -i Git.Git (注意：wingetでこのコマンドを実行しても反応がなくて、うまくいかないことがありました。自分はwingetのバージョンを最新のものにすることで解消できました。
実際の手順は以下のブログが参考になるかもしれないです。
https://zenn.dev/kawamasato/articles/11c4477e101374)
セットアップ用のシェルスクリプトファイルを実行する。 インストールしたいツールやアプリのインストーラーを順番に実行していきます。 git bashを開き、以下のコマンドを実行します。
bash setup.sh 自分が使ったファイルの中身は以下のようになっています。
#Install Software #Tool winget install -e -i 7zip.7zip # 解凍,圧縮ソフト winget install -e -i CPUID.HWMonitor # CPU,GPUなどの状態監視ツール winget install -e -i Maxon.CinebenchR23 # CPU ベンチマーク計測ソフト winget install -e -i CrystalDewWorld.CrystalDiskInfo # SSD 状態管理 winget install -e -i CrystalDewWorld.</description>
      
    </item>
    
    <item>
      <title>得られたネットワーク知識まとめ(ネットワークはなぜつながるのか)</title>
      <link>https://www.saity.dev/posts/network_tips/</link>
      <pubDate>Tue, 28 Nov 2023 10:52:34 +0900</pubDate>
      
      <guid>https://www.saity.dev/posts/network_tips/</guid>
      
      <description>はじめに 「ネットワークはなぜつながるのか」(https://amzn.asia/d/34KjObF)を読んで、学んだことをすぐに振り替えれるようにここに書き留めておきます。この本はマスタリングTCP/IPのようなプロトコルごとで学ぶ形ではなく、データの送信からサーバーへの到達までの各フェーズをそれぞれ説明するようなスタンスを取っています。ネットワークの細かい知識の習得だけでなく、身近にある疑問の解消もできて非常に面白いです。
少しずつ読んでいく予定なので、随時更新していきます。
ディスクリプタとは(p.80) ディスクリプタとはソケットを識別するための値でソケット作成時にクライアントアプリ側に渡されます。connectするときには宛先IPアドレス、宛先ポート番号、ディスクリプタをそれぞれ指定する必要があります。ちなみに一度connectすれば宛先の情報はソケットに保持されるので、writeやreadではディスクリプタの指定のみでよさそうです。
シーケンス番号の初期値はランダムで選ばれる。(p.119) TCPにはシーケンス番号(送信データの連番)とACK番号(受信データの連番)の２つのフィールドがありますが、シーケンス番号の初期値は乱数からカウントされることが決められています。仮に決められた値からカウントするようなことがあると、第三者が簡単にACK番号を推測できるからです。シーケンス番号のランダムな初期値はSYNパケットを送る時点ですでに設定されているらしいです。
データフレーム層のヘッダーについて(p.167) プリアンブル：56bit 101010101&amp;hellip;が続くbit列。 クロック信号のタイミングを計るための特別な信号
スタートフレームデリミタ：8bit 10101011 最後の11以降にパケットのデータが続きます。 FCS:32bit パケットの末尾に付加されるチェックサム
ツイストペアケーブルはなぜより合わさっているのか 雑音対策。主に２つあります。
外部からの雑音(電磁波)対策
ー＞より合わせることで雑音で生じた電流が互いに打ち消される。 同じケーブル内で隣りにあるより対線からの雑音対策
ー＞よりの間隔をそれぞれ変えることによって雑音が打ち消される。 ２番目の雑音による影響をクロストークといって、アナログ電話時代では他の通話の内容が聞こえることがあったらしいです。
他の対策ー＞金属製のシールドを被せる,信号線の間に仕切り板を入れる
MDIとMDI-X MDI(Media Dependent Interface)：ストレートに結線
MDI-X(Media Dependent Interface crossover)：交差して結線
片方がストレートに結線してるのならば、もう片方は交差して結線する必要があります(送信-受信の関係)。リピータハブには大体MDI/MDI-Xの切り替えスイッチがありますが、もしMDI-Xしかないリピータハブ同士を接続しなければならない場合はクロスケーブルと呼ばれる元々交差されているケーブルを用いる必要があります。コンピュータ同士を繋げる場合でも、お互いがMDIであるためクロスケーブルを用いる必要があります。ストレートとクロスの使い分けについては下記リンクのサイトが参考になりました。
Ethernet LAN - ストレートケーブルとクロスケーブル 今はどうなっているのか？
2000年頃にAutoMDI/MDI-Xという機能が登場したことによって、ストレートかクロスかを自動で判別してくれるようになりました。これでケーブルはストレートでもクロスでもどちらでもよいということになります。</description>
      
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://www.saity.dev/about/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 +0900</pubDate>
      
      <guid>https://www.saity.dev/about/</guid>
      
      <description>所属 明治大学大学院　先端数理科学研究科　先端メディアサイエンス専攻　M1
やること プログラミング Pythonをよく書きます。主に機械学習、統計処理、webバックエンド実装(Django,Flask)、簡単な自動化プログラム、スクレイピングなどの用途で使用しています。 ReactやVueなどのフロントエンドのフレームワークも使用経験もあります。あとは競技プログラミングでC++、isuconでGo言語も多少やりますが熟練度や経験値はそこまで高くないです。Go言語に関しては今でも勉強中です。
機械学習 学部時代にpytorchで画像認識をしていました。今はChatGPTのような大規模言語モデルにも関心があります。イラストや写真などの画像生成(VAE,GAN)にも興味がありましたが、拡散モデルの普及以降、技術進歩が凄まじくてついていけてないです（単純に関心がなくなってきているというのもある）。
NW,DBなどのインフラ技術 ネットワーク(DB)やデータベース(DB)系の技術に興味があります。特にNWに関しては、アプリケーション層のような身近に感じられるような技術から表面上隠蔽されて見えないような低層の技術(1,2,3,4層あたり)にまで全体的に関心があります。DBは興味はありますが、まだまだ勉強不足です。
いままでしてきたこと 授業の自由課題で探索アルゴリズムを実装し、グラフィカルなアプリとしてデモ＆発表をした(2019.7) 自作ゲーミングPCを組む(2019.8) G検定,E資格取得、AIに関する基礎知識習得(2019.11) Atcoder入茶(2020.7) ハッカソン チーム(4人)でweb開発(2020.11) pytorchで顔画像検出プログラム作成。aws環境にデプロイ(lambdaを使用) Flaskで割り勘LINEボット作成(2021.5) ハッカソン チーム(3人)でweb開発(2021.7) Dockerでwordpress環境構築(2021.7) pytorchで顔画像検出プログラム作成。aws環境にデプロイ(lambdaを使用)(2021.8) 応用情報技術者試験合格(2022.10) SNSサービス,Linkelli作成(2023.9)
Linkelli=&amp;gt; https://linkelli.net
github=&amp;gt; https://github.com/saityyy/Linkelli isucon13にチームで参加(2023.11 isucon13に参加しました。 ) 今やっていること(2023.11/28) NWに関する書籍を読む(マスタリングTCP/IPとか) Go言語の勉強 </description>
      
    </item>
    
    <item>
      <title>isucon13に参加しました</title>
      <link>https://www.saity.dev/posts/isucon13_result/</link>
      <pubDate>Mon, 27 Nov 2023 16:31:21 +0900</pubDate>
      
      <guid>https://www.saity.dev/posts/isucon13_result/</guid>
      
      <description>はじめに isucon13に参加してきました。
チームは同い年(修士1年)の３人チームで、全員isucon参加は初でした。
結果としてスコアは22284点で108位という結果でしたが、訳あって再起動試験（追試）でエラーを吐いて失格となってしまいました。(このあたりは後ほど説明します)
チーム構成と役割 全員同い年で学生チームとして参加しました。 各メンバーとそれぞれの役割は以下のとおりです。
saity : 私。インフラ担当, 手が空いてる時はGoの実装をする。 auaua : App,DB担当(主にDB) kentakunkentakun : App,DB担当(主にGoの実装) 最初のセットアップ(ssh接続やMakefileの編集など)は自分がやり、他メンバー２人はDBのインデックスを貼ることやGoの実装などをメインでやってくれました。とはいっても、最初のセットアップが終われば自分も２人と一緒にチューニング作業をしました。
予行練習 予行練習として、私達は週一で４,５回ほどオフラインで集まって過去問を解くということをしました。本番も同じように現地で集まって行いました。オフラインにしたのはコミュニケーションが取りやすく、情報共有が容易であるという理由からです。この予行練習ではチューニングに必要な環境構築や具体的にどのようなチューニングをするべきかの目処を立てるというのが主な目的でした。前者は主に以下の内容を指しており、ここを詰まらせないようにするかが最初のポイントでした。
ssh接続 Makefileの編集 ベンチを回す。 alpやslow-queryを見る マニュアルを読む git運用方針 3回目ほどで環境構築は慣れてきて、計測ツールの導入やgit運用なども問題なくできるようになりました。 チューニングに関しては主に以下のところを重点的に見ました。
Indexを貼る N+1を解消する 無駄なDBへのアクセスを減らす(Redisのようなオンメモリでデータを持たせるなどの解決策) バルクインサート DBサーバーとAppサーバーを分ける。 これらの典型的な実装や設定は調べながら練習していきました。Indexを貼ることやDBとAppを分けることは設定方法が簡単ではあったのですぐにできるようにはなりましたが、N+1の解決やRedisでデータをもたせるようにするにはGoの知識や実装力が必要だったのでかなり苦労しました。(少なくとも自分はかなり苦労しました。。。)
本番の流れ 起床試験は全員合格できました。9時半からYouTubeのライブ放送を見て、isuconの雰囲気を楽しんでいました。(サービスの紹介動画が毎回面白くて好きです。)
コンテスト自体は10:00から開始でした。
10:16 環境構築、初回ベンチマーク-&amp;gt;3379点 10時にコンテストが開始して、自分は環境構築(ssh接続やMakefile編集)、他２人がマニュアルを読んだり、DBのスキーマを覗いたりでそれぞれ作業しました。10:40ごろにひとまずMakefileの編集が終わり、ベンチマークも正常に回せることを確認。githubにpushし、alpやslow-query,マニュアルの内容などを共有して、各自でチューニング作業を行いました。
12:31 インデックスを貼る-&amp;gt;4172点(auaua) 初動でのalpやslow-queryを見て、必要そうなところにインデックスを貼ってくれました。
13:44 Redisでアイコン画像をキャッシュ-&amp;gt;9,316(kentakunkentakun) アイコンの取得に時間がかかっていることをalpで確認できたので、早い段階でRedisでキャッシュさせようという方針が立ちました。画像の枚数も見た限りだと100枚程度だったので、おそらくメモリは足りるだろうということでRedisのimportやキャッシュ処理の実装を彼にやってもらいました。
15:22 インデックス追加-&amp;gt;11469点(auaua,kentakunkentakun) 中盤からボトルネックになりだしたライブストリーム関連のDBにインデックスを貼ってくれました。
16:41 getUserStatisticsにあるN+1を部分的に改善-&amp;gt;13978(saity) 15:00あたりでユーザ配信統計情報とライブ配信統計情報の２つの処理がボトルネックになっており、そのうちのユーザ配信統計情報の方にN+1が複数あったのを確認したのでその改善をしました。Go言語の実装力が低いせいですべてのN+1を解決できませんでしたが、結果的にスコアは少し伸びました。
17:29 DBサーバーとAppサーバーの分割-&amp;gt;21794(auaua,saity) 17:00時点でGo言語実装での改善は終わらせることにして、DBとAppの分割を共同で行いました。
17:53 log出力の停止-&amp;gt;22558 nginxのaccess_logとslow-queryのログを吐き出さないようにしました。
17:58 最終ベンチ -&amp;gt;22284 その他の改善 13:41 fillLivestreamResponseのN+1改善(saity) 序盤でボトルネックになるエンドポイントの関数中にN+1の処理が入っていたので改善しました。しかし、実装した後でボトルネックがアイコン画像の取得であることを知ったため、どの程度スコア向上に寄与しているかが不明でした。Redisキャッシュの改善をマージしてベンチを回す時に、ここの改善も一緒に反映された可能性があります。
17:54 ReactionsやStatistics周りのデータをオンメモリで持たせる。(kentakunkentakun) 詳しいことは聞いてませんが、ライブ配信の統計情報のデータをRedisで持たせて、煩雑な処理を改善しようとしていました。終了5分前ぐらいにベンチマークを回しましたが、failedになってしまったので、変更を反映させることができませんでした。
結果 スコアのみの順位⇨ 最終結果⇨ 結果は570位中108位という結果でした。ですが、追試も含めたらそもそもランキング外のようなものなので複雑な気分です。実は今回のコンテストでは、Indexを貼るにあたってベンチマークを回す前にインデックスを正常に設定するためにDBの初期化を行うという追加の処理が必要となっていました。再起動試験の失敗はその処理のし忘れが原因でした。これは単純に全員そこまで気が回らなかったというのが原因ではあります。終了３分前ぐらいにリマインドタイマーを設定するぐらいの対策をするべきでした。</description>
      
    </item>
    
  </channel>
</rss>
